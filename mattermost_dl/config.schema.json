{
  "$schema": "http://json-schema.org/schema",
  "definitions": {
    "timepoint": {
      "description": "Definition of point in time",
      "oneOf": [
        {
          "description": "Unix timestamp in miliseconds",
          "type": "integer"
        },
        {
          "description": "ISO datetime as string, for example 1970-01-01T01:23:45.832330",
          "type": "string"
        }
      ]
    },
    "entityLocator": {
      "description": "Unique identification of an entity.",
      "type": "object",
      "oneOf": [
        {
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string"
            }
          }
        },
        {
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Pretty (displayed) name.",
              "type": "string"
            }
          }
        },
        {
          "required": [
            "internalName"
          ],
          "properties": {
            "internalName": {
              "description": "Internal name (used in API).",
              "type": "string"
            }
          }
        }
      ]
    },
    "channelPostOptions": {
      "type": "object",
      "properties": {
        "beforePost": {
          "type": "string",
          "description": "Only fetches posts up to and not including this post id."
        },
        "afterPost": {
          "type": "string",
          "description": "Only fetches posts after and not including this post id."
        },
        "afterTime": {
          "description": "Only fetches post after before given timepoint.",
          "$ref": "#/definitions/timepoint"
        },
        "beforeTime": {
          "description": "Only fetches post created before given timepoint.",
          "$ref": "#/definitions/timepoint"
        },
        "downloadFromOldest": {
          "description": "Selects download direction, going from oldest to newest by default.",
          "type": "boolean"
        },
        "maximumPostCount": {
          "description": "There cannot be more than this amount of posts in the storage. Good as sanity check on large channels for bulk download. Unlimited if -1 or default.",
          "type": "integer",
          "minimum": -1
        },
        "sessionPostLimit": {
          "description": "Download only up to given number of posts in one session. Unlimited if -1 or default.",
          "type": "integer",
          "minimum": -1
        },
        "onExistingCompatible": {
          "description": "Selects how to treat previously downloaded archive if new archive is to be downloaded with compatible settings, so contents of previous archive could be simply updated.\nskip - nothing will be downloaded\nupdate - archive is appended (default)\nbackup - new download is made from scratch, old archive is kept as a backup\ndelete - new download is made from scratch, old archive is deleted",
          "type": "string",
          "enum": [
            "backup",
            "delete",
            "update",
            "skip"
          ]
        },
        "onExistingIncompatible": {
          "description": "Selects how to treat previously downloaded archive if new download settings require to start from scratch.\nskip - nothing will be downloaded\nbackup - old archive is kept as a backup (default)\ndelete - old archive is deleted",
          "type": "string",
          "enum": [
            "backup",
            "delete",
            "skip"
          ]
        },
        "attachments": {
          "type": "object",
          "additionalProperties": false,
          "additionalPropertiesWarn": true,
          "properties": {
            "download": {
              "description": "Whether to download file attachments or not. Defaults to false.",
              "type": "boolean"
            },
            "maxSize": {
              "description": "Download only files that are up to and including given size in bytes.",
              "type": "integer",
              "minimum": 0
            },
            "allowedMimeTypes": {
              "description": "Download only files of specified mime types. No limit if ommited.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "emojis": {
          "type": "object",
          "additionalProperties": false,
          "additionalPropertiesWarn": true,
          "properties": {
            "download": {
              "description": "Whether to download used custom emojis or not (default).",
              "type": "boolean"
            },
            "metadata": {
              "description": "Whether to store metadata structures for stored emoji (default) or not. If not, custom emojis are retained only in text form.",
              "type": "boolean"
            }
          }
        },
        "avatars": {
          "type": "object",
          "additionalProperties": false,
          "additionalPropertiesWarn": true,
          "properties": {
            "download": {
              "description": "Whether to download user icons (avatars) or not (default).",
              "type": "boolean"
            }
          }
        }
      }
    }
  },
  "type": "object",
  "additionalProperties": false,
  "additionalPropertiesWarn": true,
  "required": [
    "version"
  ],
  "properties": {
    "$schema": {
      "type": "string"
    },
    "version": {
      "description": "Version of the config file schema. Used for backward compatibilty and problem reporting.",
      "type": "string",
      "default": "0"
    },
    "connection": {
      "description": "Contains all needed to set up a connection with the server.",
      "type": "object",
      "additionalProperties": false,
      "additionalPropertiesWarn": true,
      "properties": {
        "hostname": {
          "description": "Mattermost server url used as prefix to api calls.",
          "type": "string"
        },
        "usedApi": {
          "description": "What version of Mattermost API to use. Currently, only v4 is supported, so this field mostly serves as additional forward compatibility check.",
          "type": "number",
          "const": 4
        },
        "username": {
          "description": "Mattermost username to login as.",
          "type": "string",
          "minLength": 1
        },
        "password": {
          "description": "Password for provided username. Not necessary if login happens through through alternative strategies (like providing authentication token).",
          "type": "string"
        },
        "token": {
          "description": "Mattermost authentication token used for logging in and also for all subsequent requests. Not required if password authentication is chosen instead. Note that tokens are typically temporary and need to be refreshed once the session expires. Creation of long term tokens is permitted, but not available for ordinary users by default.",
          "type": "string"
        }
      }
    },
    "downloadTeams": {
      "description": "Should download team-based channels? (Ones explicitly specified in `teams` are treated separately)",
      "type": "boolean"
    },
    "teams": {
      "type": "array",
      "items": {
        "description": "Team scraping info. May also specify subset of data to be scraped",
        "type": "object",
        "required": [
          "team"
        ],
        "additionalProperties": false,
        "additionalPropertiesWarn": true,
        "properties": {
          "team": {
            "$ref": "#/definitions/entityLocator"
          },
          "downloadPublicChannels": {
            "description": "Should download public channels (yes by default)? Ones explicitly specified in `publicChannels` are treated separately.",
            "type": "boolean"
          },
          "publicChannels": {
            "description": "Public (open) channels to save (all if ommited).",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "description": "Channel unique identificators",
                  "$ref": "#/definitions/entityLocator"
                },
                {
                  "$ref": "#/definitions/channelPostOptions"
                }
              ]
            }
          },
          "downloadPrivateChannels": {
            "description": "Should download private channels (yes by default)? Ones explicitly specified in `privateChannels` are treated separately.",
            "type": "boolean"
          },
          "privateChannels": {
            "description": "Private channels to save.",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "description": "Channel unique identificators",
                  "$ref": "#/definitions/entityLocator"
                },
                {
                  "$ref": "#/definitions/channelPostOptions"
                }
              ]
            }
          },
          "defaultChannelOptions": {
            "$ref": "#/definitions/channelPostOptions",
            "additionalProperties": false,
            "additionalPropertiesWarn": true
          },
          "publicChannelOptions": {
            "$ref": "#/definitions/channelPostOptions",
            "additionalProperties": false,
            "additionalPropertiesWarn": true
          },
          "privateChannelOptions": {
            "$ref": "#/definitions/channelPostOptions",
            "additionalProperties": false,
            "additionalPropertiesWarn": true
          }
        }
      }
    },
    "downloadUserChannels": {
      "description": "Should download direct user to user channels (yes by default)? Ones explicitly specified in `users` are treated separately.",
      "type": "boolean"
    },
    "users": {
      "description": "List of users we want to save private conversations with.",
      "type": "array",
      "items": {
        "anyOf": [
          {
            "description": "Identification of the user.",
            "$ref": "#/definitions/entityLocator"
          },
          {
            "$ref": "#/definitions/channelPostOptions"
          }
        ]
      }
    },
    "downloadGroupChannels": {
      "description": "Should download group channels (yes by default)? Ones explicitly specified in `users` are treated separately.",
      "type": "boolean"
    },
    "groups": {
      "description": "List of groups we want to save conversations with.",
      "type": "array",
      "items": {
        "description": "Group channel selector. Specify by id or list of users.",
        "type": "object",
        "required": ["group"],
        "allOf": [
          {
            "properties": {
              "group": {
                "description": "Identification of a group channel. Either channel id or list of users.",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/entityLocator"
                    }
                  }
                ]
              }
            }
          },
          {
            "$ref": "#/definitions/channelPostOptions"
          }
        ]
      }
    },
    "downloadEmojis": {
      "description": "Whether to download all custom emojis available, regardless of origin. To download only emojis used in posts being downloaded, use per-channel option.",
      "type": "boolean"
    },
    "defaultChannelOptions": {
      "$ref": "#/definitions/channelPostOptions",
      "additionalProperties": false,
      "additionalPropertiesWarn": true
    },
    "userChannelOptions": {
      "$ref": "#/definitions/channelPostOptions",
      "additionalProperties": false,
      "additionalPropertiesWarn": true
    },
    "groupChannelOptions": {
      "$ref": "#/definitions/channelPostOptions",
      "additionalProperties": false,
      "additionalPropertiesWarn": true
    },
    "privateChannelOptions": {
      "$ref": "#/definitions/channelPostOptions",
      "additionalProperties": false,
      "additionalPropertiesWarn": true
    },
    "publicChannelOptions": {
      "$ref": "#/definitions/channelPostOptions",
      "additionalProperties": false,
      "additionalPropertiesWarn": true
    },
    "throttling": {
      "type": "object",
      "properties": {
        "loopDelay": {
          "description": "Delay between bulk requests in ms.",
          "type": "integer",
          "minimum": 0
        }
      }
    },
    "output": {
      "type": "object",
      "additionalProperties": false,
      "additionalPropertiesWarn": true,
      "properties": {
        "directory": {
          "type": "string"
        },
        "standalonePosts": {
          "description": "Whether posts contain redundant information that makes them readable without looking up ids.",
          "type": "boolean"
        },
        "humanFriendlyPosts": {
          "description": "Drops unnecessary ids from posts (replacing userIds with userNames).",
          "type": "boolean"
        }
      }
    },
    "report": {
      "type": "object",
      "additionalProperties": false,
      "additionalPropertiesWarn": true,
      "properties": {
        "verbosity": {
          "description": "Chooses level of information that program outputs.\n0 - quiet mode, only problems are shown\n1 - default mode, optimal for user facing interactive use\n2 - verbose mode with extra information, useful for debugging",
          "type": "integer",
          "minimum": 0,
          "maximum": 2,
          "default": 1
        },
        "showProgress": {
          "description": "True if smart interactive download progress be reported along the way (deduced by stdout type by default).",
          "type": ["boolean", "null"]
        },
        "progressInterval": {
          "description": "Does not report progress updates more often than this interval in miliseconds (500ms by default). Not aplied in terminals supporting line editing.",
          "type": "integer",
          "default": 500
        }
      }
    }
  }
}
