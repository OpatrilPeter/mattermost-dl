{
  "$schema": "http://json-schema.org/schema",
  "required": [
    "hostname",
    "usedApi",
    "username"
  ],
  "definitions": {
    "timepoint": {
      "description": "Definition of point in time",
      "oneOf": [
        {
          "description": "Unix timestamp in miliseconds",
          "type": "integer"
        },
        {
          "description": "ISO datetime as string, for example 1970-01-01T01:23:45.832330",
          "type": "string"
        }
      ]
    },
    "entityLocator": {
      "description": "Unique identification of an entity.",
      "type": "object",
      "oneOf": [
        {
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string"
            }
          }
        },
        {
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Pretty (displayed) name.",
              "type": "string"
            }
          }
        },
        {
          "required": [
            "internalName"
          ],
          "properties": {
            "internalName": {
              "description": "Internal name (used in API).",
              "type": "string"
            }
          }
        }
      ]
    },
    "channelPostOptions": {
      "type": "object",
      "properties": {
        "beforePost": {
          "type": "string",
          "description": "Only fetches posts up to and not including this post id."
        },
        "afterPost": {
          "type": "string",
          "description": "Only fetches posts after and not including this post id."
        },
        "afterTime": {
          "description": "Only fetches post after before given timepoint.",
          "$ref": "#/definitions/timepoint"
        },
        "beforeTime": {
          "description": "Only fetches post created before given timepoint.",
          "$ref": "#/definitions/timepoint"
        },
        "redownload": {
          "description": "If true, WILL redownload and overwrite messages already stored by previous runs. On false (default), this behavior is minimized on best effort basis.",
          "type": "boolean"
        },
        "downloadFromOldest": {
          "description": "Selects download direction, going from oldest to newest by default.",
          "type": "boolean"
        },
        "maximumPostCount": {
          "description": "Download only up to given number of posts. Unlimited if -1 or default.",
          "type": "integer",
          "minimum": -1
        },
        "attachments": {
          "type": "object",
          "properties": {
            "allow": {
              "description": "Whether to download file attachments or not. Defaults to false.",
              "type": "boolean"
            },
            "maxSize": {
              "description": "Download only files that are up to and including given size in bytes.",
              "type": "integer",
              "minimum": 0
            },
            "allowedMimeTypes": {
              "description": "Download only files of specified mime types. No limit if ommited.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "emojis": {
          "type": "object",
          "properties": {
            "download": {
              "description": "Whether to download used custom emojis or not (default).",
              "type": "boolean"
            },
            "metadata": {
              "description": "Whether to store metadata structures for stored emoji (default) or not. If not, custom emojis are retained only in text form.",
              "type": "boolean"
            }
          }
        }
      }
    }
  },
  "properties": {
    "$schema": {
      "type": "string"
    },
    "hostname": {
      "description": "Mattermost server url used as prefix to api calls.",
      "type": "string"
    },
    "usedApi": {
      "type": "number",
      "const": 4
    },
    "username": {
      "type": "string"
    },
    "password": {
      "type": "string"
    },
    "token": {
      "type": "string"
    },
    "teams": {
      "type": "array",
      "items": {
        "description": "Team scraping info. May also specify subset of data to be scraped",
        "type": "object",
        "required": [
          "team"
        ],
        "additionalProperties": false,
        "properties": {
          "team": {
            "$ref": "#/definitions/entityLocator"
          },
          "channels": {
            "description": "Public (open) channels to save (all if ommited).",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "description": "Channel unique identificators",
                  "$ref": "#/definitions/entityLocator"
                },
                {
                  "$ref": "#/definitions/channelPostOptions"
                }
              ]
            }
          },
          "defaultChannelOptions": {
            "$ref": "#/definitions/channelPostOptions"
          },
          "publicChannelOptions": {
            "$ref": "#/definitions/channelPostOptions"
          },
          "groupChannelOptions": {
            "$ref": "#/definitions/channelPostOptions"
          },
          "groups": {
            "description": "List of groups we want to save conversations with (all if ommited).",
            "type": "array",
            "items": {
              "description": "Group channel selector. Specify by id or list of users.",
              "type": "object",
              "required": ["group"],
              "allOf": [
                {
                  "properties": {
                    "group": {
                      "description": "Identification of a group channel. Either channel id or list of users.",
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/entityLocator"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "$ref": "#/definitions/channelPostOptions"
                }
              ]
            }
          }
        }
      }
    },
    "users": {
      "description": "List of users we want to save private conversations with (all if ommited)",
      "type": "array",
      "items": {
        "allOf": [
          {
            "description": "Identification of the user.",
            "$ref": "#/definitions/entityLocator"
          },
          {
            "$ref": "#/definitions/channelPostOptions"
          }
        ]
      }
    },
    "defaultChannelOptions": {
      "$ref": "#/definitions/channelPostOptions"
    },
    "directChannelOptions": {
      "$ref": "#/definitions/channelPostOptions"
    },
    "groupChannelOptions": {
      "$ref": "#/definitions/channelPostOptions"
    },
    "publicChannelOptions": {
      "$ref": "#/definitions/channelPostOptions"
    },
    "throttling": {
      "type": "object",
      "properties": {
        "loopDelay": {
          "description": "Delay between bulk requests in ms.",
          "type": "integer"
        }
      }
    },
    "output": {
      "type": "object",
      "properties": {
        "directory": {
          "type": "string"
        },
        "standalonePosts": {
          "description": "Whether posts contain redundant information that makes them readable without looking up ids.",
          "type": "boolean"
        },
        "humanFriendlyPosts": {
          "description": "Drops unnecessary ids from posts (replacing userIds with userNames).",
          "type": "boolean"
        },
        "reportShowProgress": {
          "description": "True if smart interactive download progress be reported along the way (deduced by stdout type by default).",
          "type": ["boolean", "null"]
        }
      }
    }
  }
}
